0000000000000000001 byte{
	primitive 8 bit integer signed,
}
0000000000000000002 boolean{
	primitive 8 bit boolean,
}
0000000000000000003 short{
	primitive 16 bit integer signed,
}
0000000000000000004 char{
	primitive 16 bit integer unicode,
}
0000000000000000005 int{
	primitive 32 bit integer signed,
}
0000000000000000006 float{
	primitive 32 bit decimal IEEE754,
}
0000000000000000007 long{
	primitive 64 bit integer signed,
}
0000000000000000008 double{
	primitive 64 bit decimal IEEE754,
}
0000000000000000010 java.lang.Object{}
0000000000000000011 java.lang.Byte{
	byte value,
}
0000000000000000012 java.lang.Boolean{
	boolean value,
}
0000000000000000013 java.lang.Short{
	short value,
}
0000000000000000014 java.lang.Character{
	char value,
}
0000000000000000015 java.lang.Integer{
	int value,
}
0000000000000000016 java.lang.Float{
	float value,
}
0000000000000000017 java.lang.Long{
	long value,
}
0000000000000000018 java.lang.Double{
	double value,
}
0000000000000000019 java.lang.Void{}
0000000000000000020 java.lang.Class{
	long value,
}
0000000000000000030 java.lang.String{
	[char] value,
}
0000000000000000032 java.lang.StringBuffer{
	long   capacity,
	[char] value   ,
}
0000000000000000033 java.lang.StringBuilder{
	long   capacity,
	[char] value   ,
}
0000000000000000034 java.io.File{
	[char] path,
}
0000000000000000035 java.util.Date{
	long timestamp,
}
0000000000000000037 java.math.BigInteger{
	[byte] value,
}
0000000000000000038 java.math.BigDecimal{
	[char] value,
}
0000000000000000043 java.util.ArrayList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000044 java.util.HashSet{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000046 java.util.HashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000048 java.util.Hashtable{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000049 java.util.ArrayDeque{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000050 java.util.IdentityHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000051 java.util.LinkedHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000052 java.util.LinkedHashSet{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000054 java.util.LinkedList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000056 java.util.PriorityQueue{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000057 java.util.TreeMap{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000058 java.util.TreeSet{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000059 java.util.Vector{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000060 java.util.Stack{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000061 java.util.Properties{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000062 java.util.concurrent.ConcurrentHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000063 java.util.concurrent.ConcurrentLinkedDeque{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000064 java.util.concurrent.ConcurrentLinkedQueue{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000065 java.util.concurrent.ConcurrentSkipListMap{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000066 java.util.concurrent.ConcurrentSkipListSet{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000068 java.util.Locale{
	[char] languageTag,
}
0000000000000000101 [B{
	[list] elements(
		byte element,
	),
}
0000000000000000102 [Z{
	[list] elements(
		boolean element,
	),
}
0000000000000000103 [S{
	[list] elements(
		short element,
	),
}
0000000000000000104 [C{
	[list] elements(
		char element,
	),
}
0000000000000000105 [I{
	[list] elements(
		int element,
	),
}
0000000000000000106 [F{
	[list] elements(
		float element,
	),
}
0000000000000000107 [J{
	[list] elements(
		long element,
	),
}
0000000000000000108 [D{
	[list] elements(
		double element,
	),
}
0000000000000000110 [Ljava.lang.Object;{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000010000 one.microstream.reference.Lazy$Default{
	java.lang.Object subject,
}
0000000000001000001 java.util.Currency{
	[char] currencyCode,
}
0000000000001000002 java.util.regex.Pattern{
	int    flags  ,
	[char] pattern,
}
0000000000001000003 java.net.InetAddress{
	[char] address,
}
0000000000001000004 java.net.Inet4Address{
	[char] address,
}
0000000000001000005 java.net.Inet6Address{
	[char] address,
}
0000000000001000006 java.nio.file.Path{
	[char] uri,
}
0000000000001000007 java.net.InetSocketAddress{
	java.lang.String     hostname,
	java.net.InetAddress address ,
	int                  port    ,
}
0000000000001000009 java.net.URI{
	[char] address,
}
0000000000001000010 java.net.URL{
	[char] address,
}
0000000000001000011 java.sql.Date{
	long timestamp,
}
0000000000001000012 java.sql.Time{
	long timestamp,
}
0000000000001000013 java.sql.Timestamp{
	long timestamp,
}
0000000000001000014 java.util.OptionalInt{
	boolean isPresent,
	int     value    ,
}
0000000000001000015 java.util.OptionalLong{
	boolean isPresent,
	long    value    ,
}
0000000000001000016 java.util.OptionalDouble{
	boolean isPresent,
	double  value    ,
}
0000000000001000017 java.util.Collections$UnmodifiableNavigableSet$EmptyNavigableSet{}
0000000000001000022 java.util.Collections$UnmodifiableNavigableMap$EmptyNavigableMap{}
0000000000001000026 java.util.Collections$ReverseComparator{}
0000000000001000027 java.util.WeakHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000028 java.util.concurrent.CopyOnWriteArrayList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000029 java.util.Comparators$NaturalOrderComparator{
	enum INSTANCE,
}
0000000000001000030 java.util.Optional{
	java.lang.Object java.util.Optional#value,
}
0000000000001000031 one.microstream.collections.BulkList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000036 one.microstream.collections.LimitList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000037 one.microstream.collections.FixedList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000038 one.microstream.collections.ConstList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000039 one.microstream.collections.EqBulkList{
	one.microstream.hashing.HashEqualator hashEqualator,
	long                                  capacity     ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000040 one.microstream.collections.HashEnum{
	float  hashDensity,
	[list] elements   (
		java.lang.Object element,
	),
}
0000000000001000042 one.microstream.collections.ConstHashEnum{
	float  hashDensity,
	[list] elements   (
		java.lang.Object element,
	),
}
0000000000001000043 one.microstream.collections.EqHashEnum{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000044 one.microstream.collections.EqConstHashEnum{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000045 one.microstream.collections.HashTable{
	one.microstream.collections.HashTable$Keys   keys       ,
	one.microstream.collections.HashTable$Values values     ,
	float                                        hashDensity,
	[list]                                       elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000047 one.microstream.collections.ConstHashTable{
	one.microstream.collections.ConstHashTable$Keys   keys       ,
	one.microstream.collections.ConstHashTable$Values values     ,
	float                                             hashDensity,
	[list]                                            elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000048 one.microstream.collections.EqHashTable{
	one.microstream.hashing.HashEqualator          hashEqualator,
	one.microstream.collections.EqHashTable$Keys   keys         ,
	one.microstream.collections.EqHashTable$Values values       ,
	float                                          hashDensity  ,
	[list]                                         elements     (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000049 one.microstream.collections.EqConstHashTable{
	one.microstream.hashing.HashEqualator               hashEqualator,
	one.microstream.collections.EqConstHashTable$Keys   keys         ,
	one.microstream.collections.EqConstHashTable$Values values       ,
	float                                               hashDensity  ,
	[list]                                              elements     (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000050 one.microstream.collections.Singleton{
	java.lang.Object element,
}
0000000000001000051 one.microstream.util.Substituter$Default{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000052 one.microstream.persistence.types.PersistenceRoots$Default{
	[list] instances  (
		java.lang.Object instance,
	),
	[list] identifiers(
		[char] identifier,
	),
}
0000000000001000053 one.microstream.persistence.types.PersistenceRootReference$Default{
	java.lang.Object root,
}
0000000000001000054 one.microstream.hashing.XHashing$SingletonValueHashEqualator{}
0000000000001000055 one.microstream.hashing.XHashing$SingletonIdentityHashEqualator{}
0000000000001000056 one.microstream.hashing.XHashing$SingletonKeyValueIdentityHashEqualator{}
0000000000001000057 one.microstream.collections.Empty{}
0000000000001000058 one.microstream.collections.EmptyTable{
	one.microstream.collections.EmptyTable$Keys   one.microstream.collections.EmptyTable#keys  ,
	one.microstream.collections.EmptyTable$Values one.microstream.collections.EmptyTable#values,
}
0000000000001000059 one.microstream.collections.EmptyTable$Keys{
	one.microstream.collections.EmptyTable one.microstream.collections.EmptyTable$Keys#this$0,
}
0000000000001000060 one.microstream.collections.EmptyTable$Values{
	one.microstream.collections.EmptyTable one.microstream.collections.EmptyTable$Values#this$0,
}
0000000000001000061 java.util.Collections$EmptyList{}
0000000000001000062 java.util.Collections$EmptySet{}
0000000000001000063 java.util.Collections$EmptyMap{}
0000000000001000064 org.apache.commons.text.AlphabetConverter{
	java.util.Map org.apache.commons.text.AlphabetConverter#originalToEncoded  ,
	java.util.Map org.apache.commons.text.AlphabetConverter#encodedToOriginal  ,
	int           org.apache.commons.text.AlphabetConverter#encodedLetterLength,
}
0000000000001000065 java.util.Map{}
0000000000001000066 org.apache.commons.text.Builder{}
0000000000001000067 org.apache.commons.text.CaseUtils{}
0000000000001000068 org.apache.commons.text.CharacterPredicate{}
0000000000001000069 org.apache.commons.text.CharacterPredicates{
	enum LETTERS,
	enum DIGITS,
	enum ARABIC_NUMERALS,
	enum ASCII_LOWERCASE_LETTERS,
	enum ASCII_UPPERCASE_LETTERS,
	enum ASCII_LETTERS,
	enum ASCII_ALPHA_NUMERALS,
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000070 org.apache.commons.text.CharacterPredicates$§LETTERS{
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000071 org.apache.commons.text.CharacterPredicates$§DIGITS{
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000072 org.apache.commons.text.CharacterPredicates$§ARABIC_NUMERALS{
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000073 org.apache.commons.text.CharacterPredicates$§ASCII_LOWERCASE_LETTERS{
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000074 org.apache.commons.text.CharacterPredicates$§ASCII_UPPERCASE_LETTERS{
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000075 org.apache.commons.text.CharacterPredicates$§ASCII_LETTERS{
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000076 org.apache.commons.text.CharacterPredicates$§ASCII_ALPHA_NUMERALS{
	java.lang.String java.lang.Enum#name   ,
	int              java.lang.Enum#ordinal,
}
0000000000001000077 org.apache.commons.text.CompositeFormat{
	java.text.Format org.apache.commons.text.CompositeFormat#parser   ,
	java.text.Format org.apache.commons.text.CompositeFormat#formatter,
}
0000000000001000078 java.text.Format{}
0000000000001000079 org.apache.commons.text.ExtendedMessageFormat{
	java.util.Locale    java.text.MessageFormat                      #locale         ,
	java.lang.String    java.text.MessageFormat                      #pattern        ,
	[Ljava.text.Format; java.text.MessageFormat                      #formats        ,
	[I                  java.text.MessageFormat                      #offsets        ,
	[I                  java.text.MessageFormat                      #argumentNumbers,
	java.lang.String    org.apache.commons.text.ExtendedMessageFormat#toPattern      ,
	java.util.Map       org.apache.commons.text.ExtendedMessageFormat#registry       ,
	int                 java.text.MessageFormat                      #maxOffset      ,
}
0000000000001000081 [Ljava.text.Format;{
	[list] elements(
		java.text.Format element,
	),
}
0000000000001000082 org.apache.commons.text.FormatFactory{}
0000000000001000083 org.apache.commons.text.FormattableUtils{}
0000000000001000084 org.apache.commons.text.RandomStringGenerator$1{}
0000000000001000085 org.apache.commons.text.RandomStringGenerator$Builder{
	java.util.Set                              org.apache.commons.text.RandomStringGenerator$Builder#inclusivePredicates,
	org.apache.commons.text.TextRandomProvider org.apache.commons.text.RandomStringGenerator$Builder#random             ,
	java.util.List                             org.apache.commons.text.RandomStringGenerator$Builder#characterList      ,
	int                                        org.apache.commons.text.RandomStringGenerator$Builder#minimumCodePoint   ,
	int                                        org.apache.commons.text.RandomStringGenerator$Builder#maximumCodePoint   ,
}
0000000000001000086 java.util.Set{}
0000000000001000087 org.apache.commons.text.TextRandomProvider{}
0000000000001000088 java.util.List{}
0000000000001000089 org.apache.commons.text.RandomStringGenerator{
	java.util.Set                              org.apache.commons.text.RandomStringGenerator#inclusivePredicates,
	org.apache.commons.text.TextRandomProvider org.apache.commons.text.RandomStringGenerator#random             ,
	java.util.List                             org.apache.commons.text.RandomStringGenerator#characterList      ,
	int                                        org.apache.commons.text.RandomStringGenerator#minimumCodePoint   ,
	int                                        org.apache.commons.text.RandomStringGenerator#maximumCodePoint   ,
}
0000000000001000090 org.apache.commons.text.StrBuilder$StrBuilderReader{
	java.lang.Object                   java.io.Reader                                     #lock      ,
	[C                                 java.io.Reader                                     #skipBuffer,
	org.apache.commons.text.StrBuilder org.apache.commons.text.StrBuilder$StrBuilderReader#this$0    ,
	int                                org.apache.commons.text.StrBuilder$StrBuilderReader#pos       ,
	int                                org.apache.commons.text.StrBuilder$StrBuilderReader#mark      ,
}
0000000000001000091 java.io.Reader{}
0000000000001000092 org.apache.commons.text.StrBuilder{
	[C               org.apache.commons.text.StrBuilder#buffer  ,
	java.lang.String org.apache.commons.text.StrBuilder#newLine ,
	java.lang.String org.apache.commons.text.StrBuilder#nullText,
	int              org.apache.commons.text.StrBuilder#size    ,
}
0000000000001000093 org.apache.commons.text.StrBuilder$StrBuilderTokenizer{}
0000000000001000094 org.apache.commons.text.StrTokenizer{}
0000000000001000095 org.apache.commons.text.StrBuilder$StrBuilderWriter{
	[C                                 java.io.Writer                                     #writeBuffer,
	java.lang.Object                   java.io.Writer                                     #lock       ,
	org.apache.commons.text.StrBuilder org.apache.commons.text.StrBuilder$StrBuilderWriter#this$0     ,
}
0000000000001000097 org.apache.commons.text.StrLookup$1{}
0000000000001000098 org.apache.commons.text.StrLookup$MapStrLookup{
	java.util.Map org.apache.commons.text.StrLookup$MapStrLookup#map,
}
0000000000001000099 org.apache.commons.text.StrLookup{}
0000000000001000100 org.apache.commons.text.StrLookup$ResourceBundleLookup{
	java.util.ResourceBundle org.apache.commons.text.StrLookup$ResourceBundleLookup#resourceBundle,
}
0000000000001000101 java.util.ResourceBundle{}
0000000000001000102 org.apache.commons.text.StrLookup$SystemPropertiesStrLookup{}
0000000000001000103 org.apache.commons.text.StrMatcher$CharMatcher{
	char org.apache.commons.text.StrMatcher$CharMatcher#ch,
}
0000000000001000104 org.apache.commons.text.StrMatcher{}
0000000000001000105 org.apache.commons.text.StrMatcher$CharSetMatcher{
	[C org.apache.commons.text.StrMatcher$CharSetMatcher#chars,
}
0000000000001000106 org.apache.commons.text.StrMatcher$NoMatcher{}
0000000000001000107 org.apache.commons.text.StrMatcher$StringMatcher{
	[C org.apache.commons.text.StrMatcher$StringMatcher#chars,
}
0000000000001000108 org.apache.commons.text.StrMatcher$TrimMatcher{}
0000000000001000109 org.apache.commons.text.StrSubstitutor{
	org.apache.commons.text.StrMatcher org.apache.commons.text.StrSubstitutor#prefixMatcher                ,
	org.apache.commons.text.StrMatcher org.apache.commons.text.StrSubstitutor#suffixMatcher                ,
	org.apache.commons.text.StrMatcher org.apache.commons.text.StrSubstitutor#valueDelimiterMatcher        ,
	org.apache.commons.text.StrLookup  org.apache.commons.text.StrSubstitutor#variableResolver             ,
	char                               org.apache.commons.text.StrSubstitutor#escapeChar                   ,
	boolean                            org.apache.commons.text.StrSubstitutor#enableSubstitutionInVariables,
	boolean                            org.apache.commons.text.StrSubstitutor#preserveEscapes              ,
	boolean                            org.apache.commons.text.StrSubstitutor#disableSubstitutionInValues  ,
}
0000000000001000110 org.apache.commons.text.StringEscapeUtils$1{}
0000000000001000111 org.apache.commons.text.StringEscapeUtils$Builder{
	java.lang.StringBuilder                                  org.apache.commons.text.StringEscapeUtils$Builder#sb        ,
	org.apache.commons.text.translate.CharSequenceTranslator org.apache.commons.text.StringEscapeUtils$Builder#translator,
}
0000000000001000112 org.apache.commons.text.translate.CharSequenceTranslator{}
0000000000001000113 org.apache.commons.text.StringEscapeUtils$XsiUnescaper{}
0000000000001000114 org.apache.commons.text.StringSubstitutor$1{}
0000000000001000115 org.apache.commons.text.StringSubstitutor$Result{
	boolean org.apache.commons.text.StringSubstitutor$Result#altered     ,
	int     org.apache.commons.text.StringSubstitutor$Result#lengthChange,
}
0000000000001000116 org.apache.commons.text.StringTokenizer{}
0000000000001000117 org.apache.commons.text.TextStringBuilder$TextStringBuilderReader{
	java.lang.Object                          java.io.Reader                                                   #lock      ,
	[C                                        java.io.Reader                                                   #skipBuffer,
	org.apache.commons.text.TextStringBuilder org.apache.commons.text.TextStringBuilder$TextStringBuilderReader#this$0    ,
	int                                       org.apache.commons.text.TextStringBuilder$TextStringBuilderReader#mark      ,
	int                                       org.apache.commons.text.TextStringBuilder$TextStringBuilderReader#pos       ,
}
0000000000001000118 org.apache.commons.text.TextStringBuilder{
	[C               org.apache.commons.text.TextStringBuilder#buffer       ,
	java.lang.String org.apache.commons.text.TextStringBuilder#newLine      ,
	java.lang.String org.apache.commons.text.TextStringBuilder#nullText     ,
	int              org.apache.commons.text.TextStringBuilder#reallocations,
	int              org.apache.commons.text.TextStringBuilder#size         ,
}
0000000000001000119 org.apache.commons.text.TextStringBuilder$TextStringBuilderTokenizer{}
0000000000001000120 org.apache.commons.text.TextStringBuilder$TextStringBuilderWriter{
	[C                                        java.io.Writer                                                   #writeBuffer,
	java.lang.Object                          java.io.Writer                                                   #lock       ,
	org.apache.commons.text.TextStringBuilder org.apache.commons.text.TextStringBuilder$TextStringBuilderWriter#this$0     ,
}
0000000000001000121 org.apache.commons.text.WordUtils{}
0000000000001000122 org.apache.commons.text.diff.CommandVisitor{}
0000000000001000123 org.apache.commons.text.diff.DeleteCommand{
	java.lang.Object org.apache.commons.text.diff.EditCommand#object,
}
0000000000001000124 org.apache.commons.text.diff.EditCommand{}
0000000000001000125 org.apache.commons.text.diff.EditScript{
	java.util.List org.apache.commons.text.diff.EditScript#commands     ,
	int            org.apache.commons.text.diff.EditScript#lcsLength    ,
	int            org.apache.commons.text.diff.EditScript#modifications,
}
0000000000001000126 org.apache.commons.text.diff.InsertCommand{
	java.lang.Object org.apache.commons.text.diff.EditCommand#object,
}
0000000000001000127 org.apache.commons.text.diff.KeepCommand{
	java.lang.Object org.apache.commons.text.diff.EditCommand#object,
}
0000000000001000128 org.apache.commons.text.diff.ReplacementsFinder{
	java.util.List                                   org.apache.commons.text.diff.ReplacementsFinder#pendingInsertions,
	java.util.List                                   org.apache.commons.text.diff.ReplacementsFinder#pendingDeletions ,
	org.apache.commons.text.diff.ReplacementsHandler org.apache.commons.text.diff.ReplacementsFinder#handler          ,
	int                                              org.apache.commons.text.diff.ReplacementsFinder#skipped          ,
}
0000000000001000129 org.apache.commons.text.diff.ReplacementsHandler{}
0000000000001000130 org.apache.commons.text.diff.StringsComparator$Snake{
	int org.apache.commons.text.diff.StringsComparator$Snake#start,
	int org.apache.commons.text.diff.StringsComparator$Snake#end  ,
	int org.apache.commons.text.diff.StringsComparator$Snake#diag ,
}
0000000000001000131 org.apache.commons.text.diff.StringsComparator{
	java.lang.String org.apache.commons.text.diff.StringsComparator#left ,
	java.lang.String org.apache.commons.text.diff.StringsComparator#right,
	[I               org.apache.commons.text.diff.StringsComparator#vDown,
	[I               org.apache.commons.text.diff.StringsComparator#vUp  ,
}
0000000000001000132 org.apache.commons.text.io.StringSubstitutorReader{
	java.lang.Object                              java.io.Reader                                    #lock               ,
	[C                                            java.io.Reader                                    #skipBuffer         ,
	java.io.Reader                                java.io.FilterReader                              #in                 ,
	org.apache.commons.text.TextStringBuilder     org.apache.commons.text.io.StringSubstitutorReader#buffer             ,
	org.apache.commons.text.matcher.StringMatcher org.apache.commons.text.io.StringSubstitutorReader#prefixEscapeMatcher,
	[C                                            org.apache.commons.text.io.StringSubstitutorReader#read1CharBuffer    ,
	org.apache.commons.text.StringSubstitutor     org.apache.commons.text.io.StringSubstitutorReader#stringSubstitutor  ,
	boolean                                       org.apache.commons.text.io.StringSubstitutorReader#eos                ,
	int                                           org.apache.commons.text.io.StringSubstitutorReader#toDrain            ,
}
0000000000001000134 org.apache.commons.text.matcher.StringMatcher{}
0000000000001000135 org.apache.commons.text.lookup.AbstractStringLookup{}
0000000000001000136 org.apache.commons.text.lookup.BiFunctionStringLookup{
	java.util.function.BiFunction org.apache.commons.text.lookup.BiFunctionStringLookup#biFunction,
}
0000000000001000137 java.util.function.BiFunction{}
0000000000001000138 org.apache.commons.text.lookup.BiStringLookup{}
0000000000001000139 org.apache.commons.text.lookup.ConstantStringLookup{}
0000000000001000140 org.apache.commons.text.lookup.DateStringLookup{}
0000000000001000141 org.apache.commons.text.lookup.DefaultStringLookup{
	enum BASE64_DECODER,
	enum BASE64_ENCODER,
	enum CONST,
	enum DATE,
	enum DNS,
	enum ENVIRONMENT,
	enum FILE,
	enum JAVA,
	enum LOCAL_HOST,
	enum PROPERTIES,
	enum RESOURCE_BUNDLE,
	enum SCRIPT,
	enum SYSTEM_PROPERTIES,
	enum URL,
	enum URL_DECODER,
	enum URL_ENCODER,
	enum XML,
	java.lang.String                            java.lang.Enum                                    #name   ,
	java.lang.String                            org.apache.commons.text.lookup.DefaultStringLookup#key    ,
	org.apache.commons.text.lookup.StringLookup org.apache.commons.text.lookup.DefaultStringLookup#lookup ,
	int                                         java.lang.Enum                                    #ordinal,
}
0000000000001000142 org.apache.commons.text.lookup.StringLookup{}
0000000000001000143 org.apache.commons.text.lookup.DnsStringLookup{}
0000000000001000144 org.apache.commons.text.lookup.FileStringLookup{}
0000000000001000145 org.apache.commons.text.lookup.FunctionStringLookup{
	java.util.function.Function org.apache.commons.text.lookup.FunctionStringLookup#function,
}
0000000000001000146 java.util.function.Function{}
0000000000001000147 org.apache.commons.text.lookup.IllegalArgumentExceptions{}
0000000000001000148 org.apache.commons.text.lookup.InetAddressKeys{}
0000000000001000149 org.apache.commons.text.lookup.InterpolatorStringLookup{
	org.apache.commons.text.lookup.StringLookup org.apache.commons.text.lookup.InterpolatorStringLookup#defaultStringLookup,
	java.util.Map                               org.apache.commons.text.lookup.InterpolatorStringLookup#stringLookupMap    ,
}
0000000000001000150 org.apache.commons.text.lookup.JavaPlatformStringLookup{}
0000000000001000151 org.apache.commons.text.lookup.LocalHostStringLookup{}
0000000000001000152 org.apache.commons.text.lookup.PropertiesStringLookup{}
0000000000001000153 org.apache.commons.text.lookup.ResourceBundleStringLookup{
	java.lang.String org.apache.commons.text.lookup.ResourceBundleStringLookup#bundleName,
}
0000000000001000154 org.apache.commons.text.lookup.ScriptStringLookup{}
0000000000001000155 org.apache.commons.text.lookup.StringLookupFactory{}
0000000000001000156 org.apache.commons.text.lookup.UrlDecoderStringLookup{}
0000000000001000157 org.apache.commons.text.lookup.UrlEncoderStringLookup{}
0000000000001000158 org.apache.commons.text.lookup.UrlStringLookup{}
0000000000001000159 org.apache.commons.text.lookup.XmlStringLookup{}
0000000000001000160 org.apache.commons.text.matcher.AbstractStringMatcher$AndStringMatcher{
	[Lorg.apache.commons.text.matcher.StringMatcher; org.apache.commons.text.matcher.AbstractStringMatcher$AndStringMatcher#stringMatchers,
}
0000000000001000161 org.apache.commons.text.matcher.AbstractStringMatcher{}
0000000000001000162 [Lorg.apache.commons.text.matcher.StringMatcher;{
	[list] elements(
		org.apache.commons.text.matcher.StringMatcher element,
	),
}
0000000000001000163 org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher{
	[C               org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher#chars ,
	java.lang.String org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher#string,
}
0000000000001000164 org.apache.commons.text.matcher.AbstractStringMatcher$CharMatcher{
	char org.apache.commons.text.matcher.AbstractStringMatcher$CharMatcher#ch,
}
0000000000001000165 org.apache.commons.text.matcher.AbstractStringMatcher$CharSetMatcher{
	[C org.apache.commons.text.matcher.AbstractStringMatcher$CharSetMatcher#chars,
}
0000000000001000166 org.apache.commons.text.matcher.AbstractStringMatcher$NoneMatcher{}
0000000000001000167 org.apache.commons.text.matcher.AbstractStringMatcher$TrimMatcher{}
0000000000001000168 org.apache.commons.text.matcher.StringMatcherFactory{}
0000000000001000169 org.apache.commons.text.similarity.CosineDistance{
	org.apache.commons.text.similarity.Tokenizer        org.apache.commons.text.similarity.CosineDistance#tokenizer       ,
	org.apache.commons.text.similarity.CosineSimilarity org.apache.commons.text.similarity.CosineDistance#cosineSimilarity,
}
0000000000001000170 org.apache.commons.text.similarity.Tokenizer{}
0000000000001000171 org.apache.commons.text.similarity.CosineSimilarity{}
0000000000001000172 org.apache.commons.text.similarity.Counter{}
0000000000001000173 org.apache.commons.text.similarity.EditDistance{}
0000000000001000174 org.apache.commons.text.similarity.EditDistanceFrom{
	org.apache.commons.text.similarity.EditDistance org.apache.commons.text.similarity.EditDistanceFrom#editDistance,
	java.lang.CharSequence                          org.apache.commons.text.similarity.EditDistanceFrom#left        ,
}
0000000000001000175 java.lang.CharSequence{}
0000000000001000176 org.apache.commons.text.similarity.FuzzyScore{
	java.util.Locale org.apache.commons.text.similarity.FuzzyScore#locale,
}
0000000000001000177 org.apache.commons.text.similarity.HammingDistance{}
0000000000001000178 org.apache.commons.text.similarity.IntersectionResult{
	int org.apache.commons.text.similarity.IntersectionResult#sizeA       ,
	int org.apache.commons.text.similarity.IntersectionResult#sizeB       ,
	int org.apache.commons.text.similarity.IntersectionResult#intersection,
}
0000000000001000179 org.apache.commons.text.similarity.IntersectionSimilarity$1{}
0000000000001000180 org.apache.commons.text.similarity.IntersectionSimilarity$BagCount{
	int org.apache.commons.text.similarity.IntersectionSimilarity$BagCount#count,
}
0000000000001000181 org.apache.commons.text.similarity.IntersectionSimilarity$TinyBag{
	java.util.Map                                             org.apache.commons.text.similarity.IntersectionSimilarity$TinyBag#map   ,
	org.apache.commons.text.similarity.IntersectionSimilarity org.apache.commons.text.similarity.IntersectionSimilarity$TinyBag#this$0,
}
0000000000001000182 org.apache.commons.text.similarity.IntersectionSimilarity{
	java.util.function.Function org.apache.commons.text.similarity.IntersectionSimilarity#converter,
}
0000000000001000183 org.apache.commons.text.similarity.JaccardDistance{
	org.apache.commons.text.similarity.JaccardSimilarity org.apache.commons.text.similarity.JaccardDistance#jaccardSimilarity,
}
0000000000001000184 org.apache.commons.text.similarity.JaccardSimilarity{}
0000000000001000185 org.apache.commons.text.similarity.JaroWinklerDistance{}
0000000000001000186 org.apache.commons.text.similarity.JaroWinklerSimilarity{}
0000000000001000187 org.apache.commons.text.similarity.LevenshteinDetailedDistance{
	java.lang.Integer org.apache.commons.text.similarity.LevenshteinDetailedDistance#threshold,
}
0000000000001000188 org.apache.commons.text.similarity.LevenshteinDistance{
	java.lang.Integer org.apache.commons.text.similarity.LevenshteinDistance#threshold,
}
0000000000001000189 org.apache.commons.text.similarity.LevenshteinResults{
	java.lang.Integer org.apache.commons.text.similarity.LevenshteinResults#distance       ,
	java.lang.Integer org.apache.commons.text.similarity.LevenshteinResults#insertCount    ,
	java.lang.Integer org.apache.commons.text.similarity.LevenshteinResults#deleteCount    ,
	java.lang.Integer org.apache.commons.text.similarity.LevenshteinResults#substituteCount,
}
0000000000001000190 org.apache.commons.text.similarity.LongestCommonSubsequence{}
0000000000001000191 org.apache.commons.text.similarity.LongestCommonSubsequenceDistance{
	org.apache.commons.text.similarity.LongestCommonSubsequence org.apache.commons.text.similarity.LongestCommonSubsequenceDistance#longestCommonSubsequence,
}
0000000000001000192 org.apache.commons.text.similarity.RegexTokenizer{}
0000000000001000193 org.apache.commons.text.similarity.SimilarityScore{}
0000000000001000194 org.apache.commons.text.similarity.SimilarityScoreFrom{
	org.apache.commons.text.similarity.SimilarityScore org.apache.commons.text.similarity.SimilarityScoreFrom#similarityScore,
	java.lang.CharSequence                             org.apache.commons.text.similarity.SimilarityScoreFrom#left           ,
}
0000000000001000195 org.apache.commons.text.translate.AggregateTranslator{
	java.util.List org.apache.commons.text.translate.AggregateTranslator#translators,
}
0000000000001000196 org.apache.commons.text.translate.CodePointTranslator{}
0000000000001000197 org.apache.commons.text.translate.CsvTranslators$CsvEscaper{}
0000000000001000199 org.apache.commons.text.translate.CsvTranslators$CsvUnescaper{}
0000000000001000200 org.apache.commons.text.translate.CsvTranslators{}
0000000000001000201 org.apache.commons.text.translate.EntityArrays{}
0000000000001000202 org.apache.commons.text.translate.JavaUnicodeEscaper{
	int     org.apache.commons.text.translate.UnicodeEscaper#below  ,
	int     org.apache.commons.text.translate.UnicodeEscaper#above  ,
	boolean org.apache.commons.text.translate.UnicodeEscaper#between,
}
0000000000001000204 org.apache.commons.text.translate.LookupTranslator{
	java.util.Map    org.apache.commons.text.translate.LookupTranslator#lookupMap,
	java.util.BitSet org.apache.commons.text.translate.LookupTranslator#prefixSet,
	int              org.apache.commons.text.translate.LookupTranslator#shortest ,
	int              org.apache.commons.text.translate.LookupTranslator#longest  ,
}
0000000000001000205 java.util.BitSet{
	[J java.util.BitSet#words,
}
